type: collection.insomnia.rest/5.0
name: Obsinity API Collection
meta:
  id: wrk_68f2907246df440f96e2f024b4a89fee
  created: 1754511487081
  modified: 1754511487081
  description: "Obsinity reference service (HTTP only) with publish_event (single/batch), JQL stubs."

collection:
  # ================ Runtime: Publish Event (OK) ================
  - url: "{{ base_url }}/events/{{ service_id }}/{{ event_name }}/publish"
    name: publish_event (OK)
    meta:
      id: req_publish_event_ok
      created: 1754511487081
      modified: 1754511487081
      isPrivate: false
      description: "Publish a single event (camelCase, nested attributes, OTEL aware)."
      sortKey: -180
    method: POST
    body:
      mimeType: application/json
      text: |
        {
          "eventId": "{{ event_id }}",
          "timestamp": "{{ nowIso }}",
          "name": "getAccountHolders",
          "kind": "SERVER",
          "trace": {
            "traceId": "{{ trace_id }}",
            "spanId": "{{ span_id }}"
          },
          "resource": {
            "attributes": {
              "service": {
                "id": "{{ service_id }}",
                "name": "obsinity-reference-service",
                "version": "0.1.0"
              },
              "deployment": { "environment": "dev" }
            }
          },
          "attributes": {
            "api":   { "name": "getAccountHolders", "version": "v2" },
            "http":  { "status": 200, "method": "GET" },
            "user":  { "id": "svc-42" },
            "partnerId": "px-01",
            "currency": "EUR",
            "latencyMs": 91.2
          },
          "correlationId": "{{ correlation_id }}",
          "synthetic": false
        }
    headers:
      - name: Content-Type
        value: application/json
    settings:
      renderRequestBody: true
      encodeUrl: true
      followRedirects: global
      cookies: { send: true, store: true }
      rebuildPath: true

  # ================ Runtime: Publish Event (ERROR) ================
  - url: "{{ base_url }}/events/{{ service_id }}/{{ event_name }}/publish"
    name: publish_event (ERROR)
    meta:
      id: req_publish_event_err
      created: 1754511487081
      modified: 1754511487081
      isPrivate: false
      description: "Publish a failing event variant to exercise error paths and 500 filtering."
    method: POST
    body:
      mimeType: application/json
      text: |
        {
          "eventId": "{{ event_id_error }}",
          "timestamp": "{{ nowIso }}",
          "name": "createTransaction",
          "kind": "SERVER",
          "trace": {
            "traceId": "{{ trace_id }}",
            "spanId": "{{ span_id_error }}"
          },
          "status": { "code": "ERROR", "message": "Simulated failure" },
          "attributes": {
            "api":   { "name": "createTransaction", "version": "v2" },
            "http":  { "status": 500, "method": "POST" },
            "user":  { "id": "svc-42" },
            "partnerId": "px-01",
            "currency": "EUR",
            "latencyMs": 240.4,
            "error": { "type": "java.lang.IllegalStateException" }
          },
          "correlationId": "{{ correlation_id }}",
          "synthetic": false
        }
    headers:
      - name: Content-Type
        value: application/json
    settings:
      renderRequestBody: true
      encodeUrl: true
      followRedirects: global
      cookies: { send: true, store: true }
      rebuildPath: true

  # ================ Runtime: Publish Event (BATCH) ================
  - url: "{{ base_url }}/events/{{ service_id }}/{{ event_name }}/publish/batch"
    name: publish_event (BATCH)
    meta:
      id: req_publish_event_batch
      created: 1754511487082
      modified: 1754511487082
      isPrivate: false
      description: "Publish an array of events (same schema as single)."
      sortKey: -170
    method: POST
    body:
      mimeType: application/json
      text: |
        [
          {
            "eventId": "{{ event_id_1 }}",
            "timestamp": "{{ nowIso }}",
            "name": "lookupUser",
            "kind": "CLIENT",
            "trace": { "traceId": "{{ trace_id }}", "spanId": "{{ span_id }}" },
            "attributes": {
              "api": { "name": "lookupUser" },
              "http": { "status": 200, "method": "GET" },
              "latencyMs": 45.1
            },
            "synthetic": false
          },
          {
            "eventId": "{{ event_id_2 }}",
            "timestamp": "{{ nowIso }}",
            "name": "dbCall",
            "kind": "INTERNAL",
            "trace": { "traceId": "{{ trace_id }}", "spanId": "{{ span_id_2 }}" },
            "attributes": {
              "db": { "system": "postgresql", "statement": "select 1" }
            },
            "synthetic": false
          }
        ]
    headers:
      - name: Content-Type
        value: application/json
    settings:
      renderRequestBody: true
      encodeUrl: true
      followRedirects: global
      cookies: { send: true, store: true }
      rebuildPath: true

  # ================ JQL: Select Events (stub) ================
  - url: "{{ base_url }}/jql"
    name: JQL - Select Events (ROWS)
    meta:
      id: req_jql_select_events
      created: 1754511487090
      modified: 1754511487090
      isPrivate: false
      description: "Structured JQL: event select with WHERE, rollup, limit."
      sortKey: -120
    method: POST
    body:
      mimeType: application/json
      text: |
        {
          "jql": "1.0",
          "op": "select_event",
          "service": "{{ service_id }}",
          "event": "{{ event_name }}",
          "select": ["eventId", "timestamp", "http.status"],
          "where": { "api.name": "getAccountHolders", "http.status": 200 },
          "using_rollup": "1m",
          "order_by": [{ "timestamp": "desc" }],
          "limit": 100
        }
    headers:
      - name: Content-Type
        value: application/json
    settings:
      renderRequestBody: true
      encodeUrl: true
      followRedirects: global
      cookies: { send: true, store: true }
      rebuildPath: true

  # ================ JQL: Select Counter (stub) ================
  - url: "{{ base_url }}/jql"
    name: JQL - Select Counter (BUCKETED HAL)
    meta:
      id: req_jql_select_counter
      created: 1754511487091
      modified: 1754511487091
      isPrivate: false
      description: "Structured JQL: counter time-series example."
      sortKey: -110
    method: POST
    body:
      mimeType: application/json
      text: |
        {
          "jql": "1.0",
          "op": "select_counter",
          "counter": "req_calls",
          "where": { "partnerId": "px-01" },
          "range": { "last": "7d" },
          "interval": "1h",
          "group_by": ["http.status"],
          "bucketed": true,
          "output": "HAL"
        }
    headers:
      - name: Content-Type
        value: application/json
    settings:
      renderRequestBody: true
      encodeUrl: true
      followRedirects: global
      cookies: { send: true, store: true }
      rebuildPath: true

  # ================ Health (optional actuator) ================
  - url: "{{ base_url }}/actuator/health"
    name: Health
    meta:
      id: req_health
      created: 1754511487084
      modified: 1754511487084
      isPrivate: false
      description: "Spring Boot actuator health check (if enabled)."
      sortKey: -50
    method: GET
    body: { mimeType: application/json, text: "" }
    settings:
      renderRequestBody: true
      encodeUrl: true
      followRedirects: global
      cookies: { send: true, store: true }
      rebuildPath: true

cookieJar:
  name: Default Jar
  meta:
    id: jar_a149c3669a9047f3aef00b245c81d669
    created: 1753721379030
    modified: 1753721379030

environments:
  name: Base Environment
  meta:
    id: env_48ee75400dc54513958ace253d876e61
    created: 1753721379025
    modified: 1754639228167
    isPrivate: false
  data:
    base_url: http://localhost:8086
    service_id: obsinity-reference-service
    event_name: api_request
    nowIso: "{% now 'iso-8601', 'utc' %}"
    correlation_id: "{% uuid 'v4' %}"
    trace_id: "{% uuid 'v4' %}"
    span_id: "{% uuid 'v4' %}"
    span_id_2: "{% uuid 'v4' %}"
    span_id_error: "{% uuid 'v4' %}"
    event_id: "{% uuid 'v4' %}"
    event_id_1: "{% uuid 'v4' %}"
    event_id_2: "{% uuid 'v4' %}"
    event_id_error: "{% uuid 'v4' %}"
