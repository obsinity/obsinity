type: collection.insomnia.rest/5.0
name: Obsinity API Collection
meta:
  id: wrk_68f2907246df440f96e2f024b4a89fee
  created: 1754511487081
  modified: 1754511487081
  description: "Obsinity reference service (HTTP only) with publish_event (single/homogeneous batch/mixed batch), JQL stubs."

collection:
  - url: "{{ base_url }}/events/publish"
    name: publish_event (OK - body routed)
    meta:
      id: req_publish_event_ok
      created: 1754511487081
      modified: 1754511487081
      isPrivate: false
      description: "Publish a single event (camelCase, nested attributes, OTEL aware)."
    method: POST
    body:
      mimeType: application/json
      text: |
        {
          "event": { "name": "{{ event_name }}", "domain": "http", "kind": "SERVER" },
          "resource": { "service": { "name": "{{ service_id }}" } },
          "trace": { "correlation_id": "{{ correlation_id }}", "trace_id": "{{ trace_id }}", "span_id": "{{ span_id }}" },
          "attributes": {
            "api": { "name": "getAccountHolders", "version": "v2" },
            "http": { "status": 200, "method": "GET" }
          },
          "occurred_at": "{{ nowIso }}"
        }
    headers:
      - name: Content-Type
        value: application/json
    settings: { renderRequestBody: true, encodeUrl: true, followRedirects: global, cookies: { send: true, store: true }, rebuildPath: true }

  - url: "{{ base_url }}/events/publish"
    name: publish_event (ERROR - body routed)
    meta: { id: req_publish_event_err, created: 1754511487081, modified: 1754511487081, isPrivate: false, description: "Error variant." }
    method: POST
    body:
      mimeType: application/json
      text: |
        {
          "event": { "name": "{{ event_name }}", "domain": "http", "kind": "SERVER" },
          "resource": { "service": { "name": "{{ service_id }}" } },
          "trace": { "correlation_id": "{{ correlation_id }}", "trace_id": "{{ trace_id }}", "span_id": "{{ span_id_error }}" },
          "attributes": {
            "api": { "name": "createTransaction", "version": "v2" },
            "http": { "status": 500, "method": "POST" }
          },
          "occurred_at": "{{ nowIso }}"
        }
    headers:
      - name: Content-Type
        value: application/json
    settings: { renderRequestBody: true, encodeUrl: true, followRedirects: global, cookies: { send: true, store: true }, rebuildPath: true }

  - url: "{{ base_url }}/events/publish/batch"
    name: publish_event (BATCH homogeneous - body routed)
    meta: { id: req_publish_event_batch, created: 1754511487082, modified: 1754511487082, isPrivate: false, description: "Batch for a single event type from URI." }
    method: POST
    body:
      mimeType: application/json
      text: |
        [
          {
            "event": { "name": "{{ event_name }}", "domain": "http", "kind": "CLIENT" },
            "resource": { "service": { "name": "{{ service_id }}" } },
            "trace": { "correlation_id": "{{ correlation_id }}", "trace_id": "{{ trace_id }}", "span_id": "{{ span_id }}" },
            "attributes": { "api": { "name": "lookupUser" }, "http": { "status": 200 } },
            "occurred_at": "{{ nowIso }}"
          },
          {
            "event": { "name": "{{ event_name }}", "domain": "db", "kind": "INTERNAL" },
            "resource": { "service": { "name": "{{ service_id }}" } },
            "trace": { "correlation_id": "{{ correlation_id }}", "trace_id": "{{ trace_id }}", "span_id": "{{ span_id_2 }}" },
            "attributes": { "db": { "system": "postgresql", "statement": "select 1" } },
            "occurred_at": "{{ nowIso }}"
          }
        ]
    headers:
      - name: Content-Type
        value: application/json
    settings: { renderRequestBody: true, encodeUrl: true, followRedirects: global, cookies: { send: true, store: true }, rebuildPath: true }

  # Mixed batch deprecated: body-routed batch accepts per-item service/event in body

  

  # ===================== Search API (JSON) =====================
  # Notes:
  # - period: { since: "-1h" } or { between: ["ISO", "ISO"] }
  # - match (indexed attributes only):
  #     - Single condition: { attribute: "http.status", op: "=", value: 200 }
  #     - Boolean groups: { and: [ ... ] } or { or: [ ... ] }
  #       where each item is { attribute, op, value }
  #     - Supported ops: =, !=, like, ilike
  # - filter (full event, post-filtering):
  #     - Single condition: { path: "trace.correlation_id", op: "=", value: "..." }
  #     - Boolean groups: { and: [ ... ] } or { or: [ ... ] }
  #       where each item is { path, op, value }
  #     - Supported ops: =, !=, like, ilike (no regex)
  # - order: [ { field: "occurred_at", dir: "desc" } ]
  # - Results always return full events; select is not required.

  - url: "{{ base_url }}/api/search/events"
    name: Search - Exact match (AND)
    meta: { id: req_search_exact_and, created: 1754511488090, modified: 1754511488090, isPrivate: false, description: "payments http_request where api.name and http.status match in last 1h" }
    method: POST
    body:
      mimeType: application/json
      text: |
        {
          "service": "{{ service_id }}",
          "event": "{{ event_name }}",
          "period": { "since": "-1h" },
          "match": {
            "and": [
              { "attribute": "api.name",    "op": "=",  "value": "getAccountHolders" },
              { "attribute": "http.status", "op": "=",  "value": 200 }
            ]
          },
          "order": [{ "field": "occurred_at", "dir": "desc" }],
          "limit": 100,
          "offset": 0
        }
    headers:
      - name: Content-Type
        value: application/json
    settings: { renderRequestBody: true, encodeUrl: true, followRedirects: global, cookies: { send: true, store: true }, rebuildPath: true }

  - url: "{{ base_url }}/api/search/events"
    name: Search - ILIKE prefix (AND)
    meta: { id: req_search_ilike_prefix, created: 1754511488091, modified: 1754511488091, isPrivate: false, description: "api.name ilike 'create%' in last 24h" }
    method: POST
    body:
      mimeType: application/json
      text: |
        {
          "service": "{{ service_id }}",
          "event": "{{ event_name }}",
          "period": { "since": "-24h" },
          "match": {
            "and": [
              { "attribute": "api.name",   "op": "ilike", "value": "create%" },
              { "attribute": "http.method", "op": "=",     "value": "GET" }
            ]
          },
          "order": [{ "field": "occurred_at", "dir": "desc" }],
          "limit": 200
        }
    headers:
      - name: Content-Type
        value: application/json
    settings: { renderRequestBody: true, encodeUrl: true, followRedirects: global, cookies: { send: true, store: true }, rebuildPath: true }

  - url: "{{ base_url }}/api/search/events"
    name: Search - LIKE substring + != (AND)
    meta: { id: req_search_like_sub_ne, created: 1754511488092, modified: 1754511488092, isPrivate: false, description: "LIKE '%%account%%' and status != 500 between time window" }
    method: POST
    body:
      mimeType: application/json
      text: |
        {
          "service": "{{ service_id }}",
          "event": "{{ event_name }}",
          "period": { "between": ["2025-09-15T00:00:00Z", "2025-09-15T06:00:00Z"] },
          "match": {
            "and": [
              { "attribute": "api.name",    "op": "like", "value": "%account%" },
              { "attribute": "http.status", "op": "!=",   "value": 500 }
            ]
          },
          "order": [{ "field": "occurred_at", "dir": "desc" }],
          "limit": 100
        }
    headers:
      - name: Content-Type
        value: application/json
    settings: { renderRequestBody: true, encodeUrl: true, followRedirects: global, cookies: { send: true, store: true }, rebuildPath: true }

  - url: "{{ base_url }}/api/search/events"
    name: Search - Category filter (full-event)
    meta: { id: req_search_category, created: 1754511488093, modified: 1754511488093, isPrivate: false, description: "Filter by registry metadata event.subCategory (not in attributes)" }
    method: POST
    body:
      mimeType: application/json
      text: |
        {
          "service": "{{ service_id }}",
          "event": "{{ event_name }}",
          "period": { "since": "-1h" },
          "filter": { "path": "event.subCategory", "op": "=", "value": "http.server" },
          "order": [{ "field": "occurred_at", "dir": "desc" }],
          "limit": 50
        }
    headers:
      - name: Content-Type
        value: application/json
    settings: { renderRequestBody: true, encodeUrl: true, followRedirects: global, cookies: { send: true, store: true }, rebuildPath: true }

  - url: "{{ base_url }}/api/search/events"
    name: Search - CorrelationId (filter)
    meta: { id: req_search_corr_id, created: 1754511488094, modified: 1754511488094, isPrivate: false, description: "Filter by correlation id via attribute path (envelope projection)" }
    method: POST
    body:
      mimeType: application/json
      text: |
        {
          "service": "{{ service_id }}",
          "event": "{{ event_name }}",
          "period": { "since": "-15m" },
          "filter": { "path": "trace.correlation_id", "op": "=", "value": "{{ correlation_id }}" },
          "order": [{ "field": "occurred_at", "dir": "desc" }],
          "limit": 25
        }
    headers:
      - name: Content-Type
        value: application/json
    settings: { renderRequestBody: true, encodeUrl: true, followRedirects: global, cookies: { send: true, store: true }, rebuildPath: true }

  - url: "{{ base_url }}/api/search/events"
    name: Search - Pagination (page 2)
    meta: { id: req_search_pagination, created: 1754511488095, modified: 1754511488095, isPrivate: false, description: "Second page using offset" }
    method: POST
    body:
      mimeType: application/json
      text: |
        {
          "service": "{{ service_id }}",
          "event": "{{ event_name }}",
          "period": { "since": "-1h" },
          "match": { "attribute": "http.status", "op": "=",  "value": 200 },
          "order": [{ "field": "occurred_at", "dir": "desc" }],
          "limit": 25,
          "offset": 25
        }
    headers:
      - name: Content-Type
        value: application/json
    settings: { renderRequestBody: true, encodeUrl: true, followRedirects: global, cookies: { send: true, store: true }, rebuildPath: true }

  - url: "{{ base_url }}/api/search/events"
    name: Search - Filter OR (full-event)
    meta: { id: req_search_filter_or, created: 1754511488097, modified: 1754511488097, isPrivate: false, description: "Full-event OR filter with ilike patterns" }
    method: POST
    body:
      mimeType: application/json
      text: |
        {
          "service": "{{ service_id }}",
          "event": "{{ event_name }}",
          "period": { "since": "-24h" },
          "match": [
            { "attribute": "http.method", "op": "=", "value": "GET" }
          ],
          "filter": {
            "or": [
              { "path": "attributes.api.name", "op": "ilike", "value": "create%" },
              { "path": "attributes.api.name", "op": "ilike", "value": "update%" }
            ]
          },
          "order": [{ "field": "occurred_at", "dir": "desc" }],
          "limit": 100
        }
    headers:
      - name: Content-Type
        value: application/json
    settings: { renderRequestBody: true, encodeUrl: true, followRedirects: global, cookies: { send: true, store: true }, rebuildPath: true }

  - url: "{{ base_url }}/api/search/events"
    name: Search - Match OR (indexed)
    meta: { id: req_search_match_or, created: 1754511488099, modified: 1754511488099, isPrivate: false, description: "Indexed OR over match conditions" }
    method: POST
    body:
      mimeType: application/json
      text: |
        {
          "service": "{{ service_id }}",
          "event": "{{ event_name }}",
          "period": { "since": "-6h" },
          "match": {
            "or": [
              { "attribute": "http.status", "op": "=", "value": 200 },
              { "attribute": "http.status", "op": "=", "value": 201 }
            ]
          },
          "order": [{ "field": "occurred_at", "dir": "desc" }],
          "limit": 100
        }
    headers:
      - name: Content-Type
        value: application/json
    settings: { renderRequestBody: true, encodeUrl: true, followRedirects: global, cookies: { send: true, store: true }, rebuildPath: true }

  - url: "{{ base_url }}/api/search/events"
    name: Search - Filter Nested (AND/OR)
    meta: { id: req_search_filter_nested, created: 1754511488098, modified: 1754511488098, isPrivate: false, description: "Nested AND with inner OR on full-event paths" }
    method: POST
    body:
      mimeType: application/json
      text: |
        {
          "service": "{{ service_id }}",
          "event": "{{ event_name }}",
          "period": { "between": ["2025-09-15T00:00:00Z", "2025-09-15T06:00:00Z"] },
          "match": [
            { "attribute": "http.status", "op": "!=", "value": 500 }
          ],
          "filter": {
            "and": [
              { "path": "attributes.client.ip", "op": "!=", "value": "10.0.0.1" },
              { "or": [
                  { "path": "attributes.api.name", "op": "like",  "value": "%account%" },
                  { "path": "attributes.api.name", "op": "ilike", "value": "create%" }
                ]
              }
            ]
          },
          "order": [{ "field": "occurred_at", "dir": "desc" }],
          "limit": 100
        }
    headers:
      - name: Content-Type
        value: application/json
    settings: { renderRequestBody: true, encodeUrl: true, followRedirects: global, cookies: { send: true, store: true }, rebuildPath: true }

  - url: "{{ base_url }}/api/search/events"
    name: Search - Match AND with nested OR
    meta: { id: req_search_match_and_or, created: 1754511488100, modified: 1754511488100, isPrivate: false, description: "Indexed AND with inner OR over equality conditions" }
    method: POST
    body:
      mimeType: application/json
      text: |
        {
          "service": "{{ service_id }}",
          "event": "{{ event_name }}",
          "period": {
            "since": "-1h"
          },
          "match": {
            "and": [
              {
                "attribute": "api.name",
                "op": "=",
                "value": "getAccountHolders"
              },
              {
                "or": [
                  { "attribute": "http.status", "op": "=", "value": 200 },
                  { "attribute": "http.status", "op": "=", "value": 201 }
                ]
              }
            ]
          },
          "order": [ { "field": "occurred_at", "dir": "desc" } ],
          "limit": 100,
          "offset": 0
        }
    headers:
      - name: Content-Type
        value: application/json
    settings: { renderRequestBody: true, encodeUrl: true, followRedirects: global, cookies: { send: true, store: true }, rebuildPath: true }

  

  - url: "{{ base_url }}/actuator/health"
    name: Health
    meta: { id: req_health, created: 1754511487084, modified: 1754511487084, isPrivate: false, description: "Spring Boot actuator health." }
    method: GET
    body: { mimeType: application/json, text: "" }
    settings: { renderRequestBody: true, encodeUrl: true, followRedirects: global, cookies: { send: true, store: true }, rebuildPath: true }

cookieJar:
  name: Default Jar
  meta:
    id: jar_a149c3669a9047f3aef00b245c81d669
    created: 1753721379030
    modified: 1753721379030

environments:
  name: Base Environment
  meta:
    id: env_48ee75400dc54513958ace253d876e61
    created: 1753721379025
    modified: 1754639228167
    isPrivate: false
  data:
    base_url: http://localhost:8086
    service_id: payments
    event_name: http_request
    nowIso: "{% now 'iso-8601', 'utc' %}"
    correlation_id: "{% uuid 'v4' %}"
    trace_id: "{% uuid 'v4' %}"
    span_id: "{% uuid 'v4' %}"
    span_id_2: "{% uuid 'v4' %}"
    span_id_error: "{% uuid 'v4' %}"
    event_id: "{% uuid 'v4' %}"
    event_id_1: "{% uuid 'v4' %}"
    event_id_2: "{% uuid 'v4' %}"
    event_id_error: "{% uuid 'v4' %}"
