type: collection.insomnia.rest/5.0
name: Obsinity API Collection
meta:
  id: wrk_68f2907246df440f96e2f024b4a89fee
  created: 1754511487081
  modified: 1754511487081
  description: "Obsinity reference service (HTTP only) with publish_event (single/homogeneous batch/mixed batch), JQL stubs."

collection:
  - url: "{{ base_url }}/events/{{ service_id }}/{{ event_name }}/publish"
    name: publish_event (OK)
    meta:
      id: req_publish_event_ok
      created: 1754511487081
      modified: 1754511487081
      isPrivate: false
      description: "Publish a single event (camelCase, nested attributes, OTEL aware)."
    method: POST
    body:
      mimeType: application/json
      text: |
        {
          "eventId": "{{ event_id }}",
          "timestamp": "{{ nowIso }}",
          "name": "getAccountHolders",
          "kind": "SERVER",
          "trace": { "traceId": "{{ trace_id }}", "spanId": "{{ span_id }}" },
          "attributes": {
            "api": { "name": "getAccountHolders", "version": "v2" },
            "http": { "status": 200, "method": "GET" },
            "latencyMs": 91.2
          },
          "correlationId": "{{ correlation_id }}"
        }
    headers:
      - name: Content-Type
        value: application/json
    settings: { renderRequestBody: true, encodeUrl: true, followRedirects: global, cookies: { send: true, store: true }, rebuildPath: true }

  - url: "{{ base_url }}/events/{{ service_id }}/{{ event_name }}/publish"
    name: publish_event (ERROR)
    meta: { id: req_publish_event_err, created: 1754511487081, modified: 1754511487081, isPrivate: false, description: "Error variant." }
    method: POST
    body:
      mimeType: application/json
      text: |
        {
          "eventId": "{{ event_id_error }}",
          "timestamp": "{{ nowIso }}",
          "name": "createTransaction",
          "kind": "SERVER",
          "status": { "code": "ERROR", "message": "Simulated failure" },
          "attributes": {
            "api": { "name": "createTransaction", "version": "v2" },
            "http": { "status": 500, "method": "POST" }
          },
          "trace": { "traceId": "{{ trace_id }}", "spanId": "{{ span_id_error }}" },
          "correlationId": "{{ correlation_id }}"
        }
    headers:
      - name: Content-Type
        value: application/json
    settings: { renderRequestBody: true, encodeUrl: true, followRedirects: global, cookies: { send: true, store: true }, rebuildPath: true }

  - url: "{{ base_url }}/events/{{ service_id }}/{{ event_name }}/publish/batch"
    name: publish_event (BATCH homogeneous)
    meta: { id: req_publish_event_batch, created: 1754511487082, modified: 1754511487082, isPrivate: false, description: "Batch for a single event type from URI." }
    method: POST
    body:
      mimeType: application/json
      text: |
        [
          {
            "eventId": "{{ event_id_1 }}",
            "timestamp": "{{ nowIso }}",
            "name": "lookupUser",
            "kind": "CLIENT",
            "attributes": { "api": { "name": "lookupUser" }, "http": { "status": 200 } },
            "trace": { "traceId": "{{ trace_id }}", "spanId": "{{ span_id }}" }
          },
          {
            "eventId": "{{ event_id_2 }}",
            "timestamp": "{{ nowIso }}",
            "name": "dbCall",
            "kind": "INTERNAL",
            "attributes": { "db": { "system": "postgresql", "statement": "select 1" } },
            "trace": { "traceId": "{{ trace_id }}", "spanId": "{{ span_id_2 }}" }
          }
        ]
    headers:
      - name: Content-Type
        value: application/json
    settings: { renderRequestBody: true, encodeUrl: true, followRedirects: global, cookies: { send: true, store: true }, rebuildPath: true }

  - url: "{{ base_url }}/events/publish/batch"
    name: publish_event (BATCH mixed)
    meta: { id: req_publish_event_batch_mixed, created: 1754511487092, modified: 1754511487092, isPrivate: false, description: "Heterogeneous batch: each item carries serviceId & eventType." }
    method: POST
    body:
      mimeType: application/json
      text: |
        [
          {
            "serviceId": "{{ service_id }}",
            "eventType": "api_request",
            "event": {
              "eventId": "{{ event_id_1 }}",
              "timestamp": "{{ nowIso }}",
              "name": "lookupUser",
              "kind": "CLIENT",
              "attributes": { "api": { "name": "lookupUser" }, "http": { "status": 200 } },
              "trace": { "traceId": "{{ trace_id }}", "spanId": "{{ span_id }}" }
            }
          },
          {
            "serviceId": "{{ service_id }}",
            "eventType": "db_call",
            "event": {
              "eventId": "{{ event_id_2 }}",
              "timestamp": "{{ nowIso }}",
              "name": "dbCall",
              "kind": "INTERNAL",
              "attributes": { "db": { "system": "postgresql", "statement": "select 1" } },
              "trace": { "traceId": "{{ trace_id }}", "spanId": "{{ span_id_2 }}" }
            }
          }
        ]
    headers:
      - name: Content-Type
        value: application/json
    settings: { renderRequestBody: true, encodeUrl: true, followRedirects: global, cookies: { send: true, store: true }, rebuildPath: true }

  - url: "{{ base_url }}/jql"
    name: JQL - Select Events (ROWS)
    meta: { id: req_jql_select_events, created: 1754511487090, modified: 1754511487090, isPrivate: false, description: "Structured JQL: event select." }
    method: POST
    body:
      mimeType: application/json
      text: |
        {
          "jql": "1.0",
          "op": "select_event",
          "service": "{{ service_id }}",
          "event": "{{ event_name }}",
          "select": ["eventId", "timestamp", "http.status"],
          "where": { "api.name": "getAccountHolders", "http.status": 200 },
          "using_rollup": "1m",
          "order_by": [{ "timestamp": "desc" }],
          "limit": 100
        }
    headers:
      - name: Content-Type
        value: application/json
    settings: { renderRequestBody: true, encodeUrl: true, followRedirects: global, cookies: { send: true, store: true }, rebuildPath: true }

  - url: "{{ base_url }}/actuator/health"
    name: Health
    meta: { id: req_health, created: 1754511487084, modified: 1754511487084, isPrivate: false, description: "Spring Boot actuator health." }
    method: GET
    body: { mimeType: application/json, text: "" }
    settings: { renderRequestBody: true, encodeUrl: true, followRedirects: global, cookies: { send: true, store: true }, rebuildPath: true }

cookieJar:
  name: Default Jar
  meta:
    id: jar_a149c3669a9047f3aef00b245c81d669
    created: 1753721379030
    modified: 1753721379030

environments:
  name: Base Environment
  meta:
    id: env_48ee75400dc54513958ace253d876e61
    created: 1753721379025
    modified: 1754639228167
    isPrivate: false
  data:
    base_url: http://localhost:8086
    service_id: obsinity-reference-service
    event_name: api_request
    nowIso: "{% now 'iso-8601', 'utc' %}"
    correlation_id: "{% uuid 'v4' %}"
    trace_id: "{% uuid 'v4' %}"
    span_id: "{% uuid 'v4' %}"
    span_id_2: "{% uuid 'v4' %}"
    span_id_error: "{% uuid 'v4' %}"
    event_id: "{% uuid 'v4' %}"
    event_id_1: "{% uuid 'v4' %}"
    event_id_2: "{% uuid 'v4' %}"
    event_id_error: "{% uuid 'v4' %}"
