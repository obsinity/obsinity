openapi: '3.0.3'
info:
  title: 'Obsinity API'
  version: '0.1.0'
  description: 'The Obsinity API enables developers to **publish** (ingest) structured,
    OTEL-aligned events and to **search** across those events using a JSON
    request format (OB-JQL). Search responses are **HAL-style** for easy
    pagination and HATEOAS navigation.

    ### Design notes
    - **Event model** mirrors OTEL concepts (`event`, `resource.service`, `trace`, `attributes`, `startedAt`).
    - **Search** splits fast **indexed predicates** (`matches`) from expressive **row filters** (`filter`).
    - **Responses** use `links` (HAL-style). For strict HAL, rename `links` â†’ `_links` and set `application/json`.'
  termsOfService: 'https://obsinity.dev/terms'
  contact:
    name: 'API Support'
    email: 'apisupport@mastercard.com'
    url: 'https://developer.mastercard.com/support'
  license:
    name: 'Apache 2.0'
    url: 'https://www.apache.org/licenses/LICENSE-2.0'

externalDocs:
  description: 'Developer Guide and examples'
  url: 'https://docs.obsinity.dev'

servers:
  - url: 'https://api.mastercard.com/'
    description: 'Production server'
  - url: 'https://sandbox.api.mastercard.com/'
    description: 'Sandbox server'

tags:
  - name: 'Events'
    description: 'Publish/ingest telemetry events.'
  - name: 'Searches'
    description: 'Search across ingested events with OB-JQL.'

paths:

  /api/events:
    post:
      tags: ['Events']
      summary: 'Publish a new event'
      description: 'Publish a single OTEL-aligned event into Obsinity. The server validates
        the event and enqueues it for durable ingestion and rollup.'
      operationId: 'publishEvent'
      requestBody:
        required: true
        description: 'Event envelope with service, trace, attributes, and time.'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventEnvelope'
            example:
              event:
                name: 'http_request'
                kind: 'SERVER'
              resource:
                service:
                  name: 'payments'
              trace:
                correlationId: 'req-123'
                traceId: 'trace-456'
                spanId: 'span-789'
              attributes:
                api:
                  name: 'getAccountHolders'
                  version: 'v2'
                http:
                  status: '201'
                  method: 'GET'
              startedAt: 2025-09-15T12:00:00Z
      responses:
        '201':
          description: 'Event created and persisted successfully. Returns the created resource.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Accepted'
        '202':
          description: 'Event accepted for ingestion (asynchronous flow). Returns an acknowledgement.'

  /api/searches/events:
    post:
      tags: ['Searches']
      summary: 'Search events'
      description: 'Search for events by service, event type, time window, match predicates,
        and filters. Results are paginated and returned as HAL-style pages.

        **Back-compat note:** This endpoint replaces `/api/search/events`. If you
        previously integrated with the singular path, migrate to this pluralized resource.'
      operationId: 'searchEvents'
      requestBody:
        required: true
        description: 'OB-JQL style search request.'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Query'
            example:
              service: 'payments'
              event: 'http_request'
              period:
                betweenTimestamps: ['2025-09-15T00:00:00Z', '2025-09-15T06:00:00Z']
              matches:
                - { attribute: 'http.status', operator: '!=', value: 500 }
              filter:
                allConditions:
                  - { path: 'attributes.client.ip', operator: '!=', value: '10.0.0.1' }
                  - anyConditions:
                      - { path: 'attributes.api.name', operator: 'like',  value: '%account%' }
                      - { path: 'attributes.api.name', operator: 'ilike', value: 'create%' }
              orders:
                - { field: 'startedAt', direction: 'desc' }
              limit: 100
      responses:
        '200':
          description: 'HAL-style paginated response representing matching events and navigation links.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchResponseHAL'
              example:
                count: 1
                total: 1
                limit: 100
                offset: 0
                data:
                  events:
                    - event: { name: 'http_request', kind: 'SERVER' }
                      resource: { service: { name: 'payments' } }
                      attributes: { http: { status: 201, method: 'GET' } }
                      startedAt: 2025-09-15T12:00:00Z
                links:
                  self:
                    href: '/api/searches/events'
                    method: 'POST'
                    body: { service: 'payments', event: 'http_request', period: { since: '-1h' } }

components:
  schemas:

    EventEnvelope:
      type: object
      description: 'OTEL-aligned event envelope.'
      properties:
        event:
          type: object
          description: 'Event identity and classification.'
          properties:
            name:
              type: string
              description: 'Event name (e.g., `http_request`). Stable across producers.'
              example: 'http_request'
              minLength: 1
              maxLength: 63
            kind:
              type: string
              description: 'SpanKind-style role. Allowed values: SERVER, CLIENT, PRODUCER, CONSUMER, INTERNAL.'
              example: 'SERVER'
              minLength: 1
              maxLength: 63
          required: [name]
        resource:
          type: object
          description: 'Resource identity of the emitter.'
          properties:
            service:
              type: object
              properties:
                name:
                  type: string
                  description: 'Short service slug (primary partition key; e.g., `payments`).'
                  example: 'payments'
                  minLength: 1
                  maxLength: 63
        trace:
          type: object
          description: 'Trace identifiers.'
          properties:
            correlationId:
              type: string
              description: 'Cross-system correlation id (request/session).'
              example: 'req-123'
              minLength: 1
              maxLength: 128
            traceId:
              type: string
              description: 'Identifier of the distributed trace for this event (W3C/OTEL aligned).'
              example: 'trace-456'
              minLength: 1
              maxLength: 128
            spanId:
              type: string
              description: 'Identifier of the specific span or unit of work within the enclosing `traceId`.'
              example: 'span-789'
              minLength: 1
              maxLength: 128
        attributes:
          type: object
          description: 'A flexible, namespaced map of producer-defined key/value pairs that enrich the event with queryable context (for example `api.name`, `api.version`, `http.status`, `http.method`, or `client.ip`). Attributes are indexed where possible for fast filtering and aggregation, and can be safely extended by producers without breaking consumers.'
          example:
            http: { status: 201, method: 'GET' }
        startedAt:
          type: string
          format: date-time
          description: 'Producer timestamp in UTC (RFC3339 date-time).'
          example: 2025-09-17T12:34:56Z
      required: [event, resource, startedAt]

    Query:
      type: object
      description: 'OB-JQL request payload for search.'
      properties:
        service:
          type: string
          description: 'Service slug (e.g., `payments`).'
          example: 'payments'
          minLength: 1
          maxLength: 63
        event:
          type: string
          description: 'The canonical event name to search for.'
          example: 'http_request'
          minLength: 1
          maxLength: 63
        period:
          $ref: '#/components/schemas/Period'
        matches:
          type: array
          description: 'Indexed predicates for fast lookup.'
          items: { $ref: '#/components/schemas/MatchPredicate' }
        filter:
          $ref: '#/components/schemas/FilterExpr'
        orders:
          type: array
          description: 'Sort order directives.'
          items: { $ref: '#/components/schemas/OrderBy' }
        limit:
          type: integer
          description: 'Maximum number of events to return in this page. Use together with `offset` to page through large result sets without overfetching.'
          example: 100
          minimum: 1
          maximum: 1000
        offset:
          type: integer
          description: 'Zero-based index of the first event to include in the page. Set to 0 for the first page and increase by `limit` for subsequent pages.'
          example: 0
          minimum: 0
          maximum: 1000000
        tz:
          type: string
          description: 'IANA timezone for rendering timestamps.'
          example: 'Europe/Dublin'
          minLength: 1
          maxLength: 64
      required: [service, event, period]

    Period:
      type: object
      description: 'Defines the query time window.'
      properties:
        previous:
          type: string
          description: 'Durational lookback window (e.g., `1h`, `24h`).'
          example: '1h'
          minLength: 1
          maxLength: 64
        since:
          type: string
          description: 'Relative duration or absolute RFC3339 timestamp.'
          example: '-1h'
          minLength: 1
          maxLength: 64
        betweenTimestamps:
          type: array
          description: 'Inclusive UTC start and end instants (two RFC3339 timestamps).'
          minItems: 2
          maxItems: 2
          items:
            type: string
            format: date-time
            minLength: 20
            maxLength: 64
          example: ['2025-09-15T00:00:00Z', '2025-09-15T06:00:00Z']

    MatchPredicate:
      type: object
      description: 'Condition over an indexed attribute.'
      properties:
        attribute:
          type: string
          description: 'Indexed attribute path (e.g., `http.status`, `api.name`).'
          example: 'http.status'
          minLength: 1
          maxLength: 255
        operator:
          type: string
          description: 'Comparison operator. Allowed values: =, !=, >, >=, <, <=, like, ilike, in, not in.'
          example: '!='
          minLength: 1
          maxLength: 16
        value:
          description: 'Value to compare.'
          example: 500
      required: [attribute, operator, value]

    FilterExpr:
      description: 'Recursive filter expression.'
      oneOf:
        - $ref: '#/components/schemas/FilterCmp'
        - $ref: '#/components/schemas/FilterAnd'
        - $ref: '#/components/schemas/FilterOr'

    FilterCmp:
      type: object
      properties:
        path:
          type: string
          description: 'Dot path in the event.'
          example: 'attributes.api.name'
          minLength: 1
          maxLength: 255
        operator:
          type: string
          description: 'Comparison operator. Allowed values: =, !=, >, >=, <, <=, like, ilike, in, not in.'
          example: 'like'
          minLength: 1
          maxLength: 16
        value:
          description: 'Value to compare against.'
          example: '%account%'
      required: [path, operator, value]

    FilterAnd:
      type: object
      properties:
        allConditions:
          type: array
          description: 'All child expressions must be true.'
          items: { $ref: '#/components/schemas/FilterExpr' }

    FilterOr:
      type: object
      properties:
        anyConditions:
          type: array
          description: 'At least one child expression must be true.'
          items: { $ref: '#/components/schemas/FilterExpr' }

    OrderBy:
      type: object
      properties:
        field:
          type: string
          description: 'Field name to sort by.'
          example: 'startedAt'
          minLength: 3
          maxLength: 63
        direction:
          type: string
          description: 'Sort direction. Allowed values: asc, desc.'
          example: 'desc'
          minLength: 3
          maxLength: 10
      required: [field]

    SearchResponseHAL:
      type: object
      properties:
        count:
          type: integer
          description: 'Number of items in the current page.'
          example: 10
          minimum: 0
          maximum: 1000
        total:
          type: integer
          description: 'Total number of items across all pages.'
          example: 250
          minimum: 0
          maximum: 1000000000
        limit:
          type: integer
          description: 'The page size applied when generating this response.'
          example: 100
          minimum: 1
          maximum: 1000
        offset:
          type: integer
          description: 'The zero-based starting index of this page.'
          example: 0
          minimum: 0
          maximum: 1000000
        data:
          type: object
          properties:
            events:
              type: array
              description: 'Event rows matching the query.'
              items: { $ref: '#/components/schemas/EventEnvelope' }
        links:
          type: object
          description: 'HAL-style navigational links for this result page. Each property name is a link relation (e.g., `self`, `first`, `next`) and the value is a callable HAL action that a client can follow to reproduce the query or paginate.'
          additionalProperties:
            $ref: '#/components/schemas/HalActionLink'
          example:
            self:
              href: '/api/searches/events'
              method: 'POST'
              body:
                service: 'payments'
                event: 'http_request'
                period: { since: '-1h' }
            first:
              href: '/api/searches/events'
              method: 'POST'
              body:
                service: 'payments'
                event: 'http_request'
                period: { since: '-1h' }
                limit: 100
                offset: 0
            next:
              href: '/api/searches/events'
              method: 'POST'
              body:
                service: 'payments'
                event: 'http_request'
                period: { since: '-1h' }
                limit: 100
                offset: 100

    HalActionLink:
      type: object
      properties:
        href:
          type: string
          description: 'The URL that represents this link relation.'
          example: '/api/searches/events'
          minLength: 1
          maxLength: 2048
        method:
          type: string
          description: 'The HTTP method to use when invoking `href`.'
          example: 'POST'
          minLength: 3
          maxLength: 10
        body:
          type: object
          description: 'Optional request body for link invocation.'
          example: { service: 'payments', event: 'http_request', period: { since: '-1h' } }
      required: [href, method]

    Accepted:
      type: object
      properties:
        status:
          type: string
          description: 'Outcome for the ingest request.'
          example: 'accepted'
          minLength: 1
          maxLength: 63
        eventId:
          type: string
          format: uuid
          description: 'Server-assigned identifier for the event.'
          example: '2cbb7a45-d7d5-4f6c-b7a8-1d2b8c52c88a'
      required: [status, eventId]

    Error:
      type: object
      properties:
        code:
          type: string
          description: 'Machine-readable error code.'
          example: 'VALIDATION_ERROR'
          minLength: 1
          maxLength: 128
        message:
          type: string
          description: 'Human-readable error message.'
          example: 'Missing required field: event.name'
          minLength: 1
          maxLength: 1024
        details:
          type: object
          description: 'Optional structured context for the error.'
          example: { field: 'event.name' }
